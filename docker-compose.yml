# docker-compose.yml
services:
  # Nginx Service
  nginx:
    build:
      context: ./.docker/nginx
    ports:
      - ${NGINX_FORWARD_PORT}:80
    volumes:
      - ./:/var/www
      - ./.docker/nginx/default.conf:/etc/nginx/conf.d/default.conf
    depends_on:
      - workspace
    networks:
      - laravel

  # PHP-FPM Service (separated from workspace)
  php-fpm:
    build:
      context: ./.docker/php-fpm
    volumes:
      - ./:/var/www
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      DB_HOST: mysql
      REDIS_HOST: redis
    restart: unless-stopped
    networks:
      - laravel

  # PHP-FPM Service
  workspace:
    build:
      context: ./.docker/workspace
    volumes:
      - ./:/var/www
      - frontend_node_modules:/var/www/frontend/node_modules  # Prevent node_modules from being overwritten
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      DB_HOST: mysql
      REDIS_HOST: redis
      VITE_HOST: 0.0.0.0
      VITE_PORT: 5173
    restart: unless-stopped
    ports:
      - 3000:3000 # For Node.js applications
    networks:
      - laravel

  # PHP Worker Service
  php-worker:
    build:
      context: ./.docker/php-worker
    volumes:
      - ./:/var/www
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      DB_HOST: mysql
      REDIS_HOST: redis
    restart: unless-stopped
    networks:
      - laravel

  # MySQL Service
  mysql:
    image: mysql:8.0
    environment:
      MYSQL_DATABASE: ${DB_DATABASE}
      MYSQL_ROOT_PASSWORD: ${DB_PASSWORD}
      MYSQL_USER: ${DB_USERNAME}
      MYSQL_PASSWORD: ${DB_PASSWORD}
    volumes:
      - .data/mysql:/var/lib/mysql
      - ./.docker/mysql:/var/lib/mysql-init
    ports:
      - "3306:3306"
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-p${DB_PASSWORD}"]
      interval: 5s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - laravel

  # Redis Service
  redis:
    image: redis:alpine
    volumes:
      - .data/redis:/data
    ports:
      - "6380:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - laravel

volumes:
  mysql-data:
  redis-data:
  frontend_node_modules:

networks:
  laravel:
