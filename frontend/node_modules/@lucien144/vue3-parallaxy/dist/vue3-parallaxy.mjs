import { defineComponent as g, ref as m, reactive as k, computed as f, onMounted as h, onUnmounted as I, openBlock as v, createElementBlock as _, normalizeClass as N, normalizeStyle as S, unref as E, renderSlot as L, createTextVNode as s, withDirectives as B, createElementVNode as o, vModelText as V, toDisplayString as u, createCommentVNode as $, pushScopeId as z, popScopeId as C } from "vue";
const p = (n) => (z("data-v-de9963f2"), n = n(), C(), n), D = {
  key: 0,
  class: "parallaxy__debug"
}, M = /* @__PURE__ */ p(() => /* @__PURE__ */ o("br", null, null, -1)), O = /* @__PURE__ */ p(() => /* @__PURE__ */ o("br", null, null, -1)), P = /* @__PURE__ */ p(() => /* @__PURE__ */ o("br", null, null, -1)), j = /* @__PURE__ */ p(() => /* @__PURE__ */ o("br", null, null, -1)), q = ["title"], T = /* @__PURE__ */ g({
  __name: "Parallaxy",
  props: {
    axis: {
      type: String,
      default: "y",
      validator: (n) => ["x", "y"].includes(n)
    },
    speed: {
      type: Number,
      default: 50
    },
    direction: {
      type: String,
      default: "normal",
      validator: (n) => ["normal", "opposite"].includes(n)
    },
    animation: {
      type: Function,
      required: !1
    },
    disabled: {
      type: Boolean,
      default: !1
    },
    debug: {
      type: Boolean,
      default: !1
    },
    breakpoints: {
      type: Object,
      required: !1
    }
  },
  setup(n) {
    const t = n, d = m(), i = m(0), l = m(!1), e = k({
      axis: t.axis,
      speed: t.speed,
      direction: t.direction,
      animation: t.animation,
      disabled: t.disabled,
      debug: t.debug
    }), y = f(() => e.disabled ? "" : e.axis === "y" ? e.animation ? e.animation(i.value) : `transform: translate3d(0, ${i.value}px, 0);` : e.animation ? e.animation(i.value) : `transform: translate3d(${i.value}px, 0, 0);`), x = f(() => ["normal"].includes(e.direction) ? 1 : -1), c = () => i.value = (window.innerHeight - d.value.getBoundingClientRect().top) * (e.speed / -1e3) * x.value, r = () => {
      if (l.value = !0, e.axis = t.axis, e.speed = t.speed, e.direction = t.direction, e.animation = t.animation, e.disabled = t.disabled, e.debug = t.debug, t.breakpoints !== void 0) {
        const b = Object.keys(t.breakpoints).sort().reverse();
        for (const a of b)
          if (window.innerWidth >= Number.parseInt(a)) {
            e.axis = t.breakpoints[Number.parseInt(a)].axis || e.axis, e.speed = t.breakpoints[Number.parseInt(a)].speed || e.speed, e.direction = t.breakpoints[Number.parseInt(a)].direction || e.direction, e.animation = t.breakpoints[Number.parseInt(a)].animation || e.animation, e.disabled = t.breakpoints[Number.parseInt(a)].disabled || e.disabled, e.debug = t.breakpoints[Number.parseInt(a)].debug || e.debug;
            break;
          }
      }
      c(), window.addEventListener("scroll", c);
    };
    return h(() => {
      typeof window > "u" || (document.readyState === "complete" ? r() : (window.addEventListener("load", r), window.addEventListener("resize", r)));
    }), I(() => {
      typeof window > "u" || (window.removeEventListener("load", r), window.removeEventListener("resize", r), window.removeEventListener("scroll", c));
    }), (b, a) => (v(), _("div", {
      class: N(["parallaxy", { "parallaxy--loaded": l.value, "parallaxy--disabled": e.disabled, "parallaxy--debug": e.debug }]),
      style: S(E(y)),
      ref_key: "$outer",
      ref: d
    }, [
      L(b.$slots, "default", {}, void 0, !0),
      e.debug ? (v(), _("div", D, [
        s(" speed: "),
        B(o("input", {
          type: "number",
          step: "1",
          "onUpdate:modelValue": a[0] || (a[0] = (w) => e.speed = w)
        }, null, 512), [
          [V, e.speed]
        ]),
        M,
        s(" delta: " + u(Math.round(i.value * 1e4) / 1e4), 1),
        O,
        s(" axis: " + u(e.axis), 1),
        P,
        s(" direction: " + u(e.direction), 1),
        j,
        s(" animation: "),
        o("abbr", {
          title: e.animation
        }, u(e.animation), 9, q)
      ])) : $("", !0)
    ], 6));
  }
});
const U = (n, t) => {
  const d = n.__vccOpts || n;
  for (const [i, l] of t)
    d[i] = l;
  return d;
}, H = /* @__PURE__ */ U(T, [["__scopeId", "data-v-de9963f2"]]);
export {
  H as default
};
